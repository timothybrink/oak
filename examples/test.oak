"
This is just a super basic bunch of working Oak 2 syntax. Strings are not fully
expanded like they should be because that's a pain. Also ints should be wrapped
in (int x).
"

(main function (fn l (sfm (assertType test l)) (block
  (print (concat (test 0) (test 1)))

  (l (test 2)))))

(function (l "Hello " "World," "from Oak v2!"))
(print (^ 0))

(if (istype ^ fn)
  (block
    (print "is a function")
    (bool 1))
  (block
    (print "is not a function")
    (bool 0)))

(main boolTest (bool 1))

(main helloStr "Hello World!")

(main helloWorld (fn str (sfm (assertType name str)) (block
  (print name)
  (print (helloStr))))

(main printName (fn str (sfm (assertType name str)) (helloWorld name))

(if boolTest
  (printName "tim")
  (helloWorld "Tim"))

(main arr (l 1 2 3 4))

((l 1 2 3) 2)

(foreach arr (fn int (sfm i prev) (block
  (print i)))

(for arr (fn int (sfm i) (block
  (print i)))

(print "----------")

(print (findIndex (l 'a' 'b' 'c') 'b'))